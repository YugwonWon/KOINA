"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import baikal.speech.stt_service_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class RecognizeServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Recognize: grpc.UnaryUnaryMultiCallable[
        baikal.speech.stt_service_pb2.RecognizeRequest,
        baikal.speech.stt_service_pb2.RecognizeResponse,
    ]
    """음성 인식"""

    LongRecognize: grpc.StreamUnaryMultiCallable[
        baikal.speech.stt_service_pb2.StreamRecognizeRequest,
        baikal.speech.stt_service_pb2.RecognizeResponse,
    ]
    """긴 음성 인식"""

    StreamRecognize: grpc.StreamStreamMultiCallable[
        baikal.speech.stt_service_pb2.StreamRecognizeRequest,
        baikal.speech.stt_service_pb2.RecognizeResponse,
    ]
    """스트리밍 음성 인식"""

class RecognizeServiceAsyncStub:
    Recognize: grpc.aio.UnaryUnaryMultiCallable[
        baikal.speech.stt_service_pb2.RecognizeRequest,
        baikal.speech.stt_service_pb2.RecognizeResponse,
    ]
    """음성 인식"""

    LongRecognize: grpc.aio.StreamUnaryMultiCallable[
        baikal.speech.stt_service_pb2.StreamRecognizeRequest,
        baikal.speech.stt_service_pb2.RecognizeResponse,
    ]
    """긴 음성 인식"""

    StreamRecognize: grpc.aio.StreamStreamMultiCallable[
        baikal.speech.stt_service_pb2.StreamRecognizeRequest,
        baikal.speech.stt_service_pb2.RecognizeResponse,
    ]
    """스트리밍 음성 인식"""

class RecognizeServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Recognize(
        self,
        request: baikal.speech.stt_service_pb2.RecognizeRequest,
        context: _ServicerContext,
    ) -> typing.Union[baikal.speech.stt_service_pb2.RecognizeResponse, collections.abc.Awaitable[baikal.speech.stt_service_pb2.RecognizeResponse]]:
        """음성 인식"""

    @abc.abstractmethod
    def LongRecognize(
        self,
        request_iterator: _MaybeAsyncIterator[baikal.speech.stt_service_pb2.StreamRecognizeRequest],
        context: _ServicerContext,
    ) -> typing.Union[baikal.speech.stt_service_pb2.RecognizeResponse, collections.abc.Awaitable[baikal.speech.stt_service_pb2.RecognizeResponse]]:
        """긴 음성 인식"""

    @abc.abstractmethod
    def StreamRecognize(
        self,
        request_iterator: _MaybeAsyncIterator[baikal.speech.stt_service_pb2.StreamRecognizeRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[baikal.speech.stt_service_pb2.RecognizeResponse], collections.abc.AsyncIterator[baikal.speech.stt_service_pb2.RecognizeResponse]]:
        """스트리밍 음성 인식"""

def add_RecognizeServiceServicer_to_server(servicer: RecognizeServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
